{"remainingRequest":"/home/fercys/Documentos/Argentina/europeshuttle_rhombus/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fercys/Documentos/Argentina/europeshuttle_rhombus/src/components/WorldMap/WorldMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fercys/Documentos/Argentina/europeshuttle_rhombus/src/components/WorldMap/WorldMap.vue","mtime":1563064259706},{"path":"/home/fercys/Documentos/Argentina/europeshuttle_rhombus/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fercys/Documentos/Argentina/europeshuttle_rhombus/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/fercys/Documentos/Argentina/europeshuttle_rhombus/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fercys/Documentos/Argentina/europeshuttle_rhombus/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n\nimport 'd3';\nimport * as d3 from 'd3';\nimport 'topojson';\nimport { throttle } from '@/util/throttle';\n\nexport default {\n  name: 'world-map',\n  props: {\n    mapData: {\n      type: Object,\n      default: () => ({})\n    },\n    points: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      id: this.randomString(),\n      color1: '#f6f9fc',\n      color2: '#adb5bd',\n      highlightFillColor: '#ced4da',\n      borderColor: 'white',\n      highlightBorderColor: 'white',\n      bubbleHighlightFillColor: '#11cdef',\n      bubbleFillColor: '#fb6340'\n    };\n  },\n  methods: {\n    generateColors(length) {\n      return d3\n        .scaleLinear()\n        .domain([0, length])\n        .range([this.color1, this.color2]);\n    },\n    generateMapColors() {\n      let mapDataValues = Object.values(this.mapData);\n      let maxVal = Math.max(...mapDataValues);\n      let colors = this.generateColors(maxVal);\n      let mapData = {};\n      let fills = {\n        defaultFill: '#EDF0F2'\n      };\n      for (let key in this.mapData) {\n        let val = this.mapData[key];\n        fills[key] = colors(val);\n        mapData[key] = {\n          fillKey: key,\n          value: val\n        };\n      }\n      return {\n        mapData,\n        fills\n      };\n    },\n    async initVectorMap() {\n      let DataMap = await import('datamaps');\n      DataMap = DataMap.default || DataMap\n      let { fills, mapData } = this.generateMapColors();\n      let worldMap = new DataMap({\n        scope: 'world',\n        element: document.getElementById(this.id),\n        fills,\n        data: mapData,\n        responsive: true,\n        geographyConfig: {\n          borderColor: this.borderColor,\n          borderWidth: 1,\n          borderOpacity: 1,\n          highlightFillColor: this.highlightFillColor,\n          highlightBorderColor: this.highlightBorderColor,\n          highlightBorderWidth: 1,\n          highlightBorderOpacity: 1\n        }\n      });\n      let bubbleOptions = {\n        radius: 2,\n        borderWidth: 4,\n        highlightBorderWidth: 4,\n        fillKey: this.bubbleFillColor,\n        fillColor: this.bubbleFillColor,\n        borderColor: this.bubbleFillColor,\n        highlightFillColor: this.bubbleHighlightFillColor,\n        highlightBorderColor: this.bubbleHighlightFillColor\n      }\n      let bubblePoints = this.points.map(point => {\n        return {\n          ...bubbleOptions,\n          ...point\n        }\n      })\n      worldMap.bubbles(bubblePoints, {\n        popupTemplate: function(geo, data) {\n          return '<div class=\"hoverinfo\">' + data.name\n        }\n      });\n      let resizeFunc = worldMap.resize.bind(worldMap);\n      window.addEventListener(\n        'resize',\n        () => {\n          throttle(resizeFunc, 40);\n        },\n        false\n      );\n    },\n    randomString() {\n      let text = \"\";\n      let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n      for (let i = 0; i < 5; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n      return text;\n    }\n  },\n  async mounted() {\n    this.initVectorMap();\n  }\n};\n",{"version":3,"sources":["WorldMap.vue"],"names":[],"mappingsfile":"WorldMap.vue","sourceRoot":"src/components/WorldMap","sourcesContent":["<template>\n  <div :id=\"id\" class=\"world-map\"></div>\n</template>\n<script>\nimport 'd3';\nimport * as d3 from 'd3';\nimport 'topojson';\nimport { throttle } from '@/util/throttle';\n\nexport default {\n  name: 'world-map',\n  props: {\n    mapData: {\n      type: Object,\n      default: () => ({})\n    },\n    points: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      id: this.randomString(),\n      color1: '#f6f9fc',\n      color2: '#adb5bd',\n      highlightFillColor: '#ced4da',\n      borderColor: 'white',\n      highlightBorderColor: 'white',\n      bubbleHighlightFillColor: '#11cdef',\n      bubbleFillColor: '#fb6340'\n    };\n  },\n  methods: {\n    generateColors(length) {\n      return d3\n        .scaleLinear()\n        .domain([0, length])\n        .range([this.color1, this.color2]);\n    },\n    generateMapColors() {\n      let mapDataValues = Object.values(this.mapData);\n      let maxVal = Math.max(...mapDataValues);\n      let colors = this.generateColors(maxVal);\n      let mapData = {};\n      let fills = {\n        defaultFill: '#EDF0F2'\n      };\n      for (let key in this.mapData) {\n        let val = this.mapData[key];\n        fills[key] = colors(val);\n        mapData[key] = {\n          fillKey: key,\n          value: val\n        };\n      }\n      return {\n        mapData,\n        fills\n      };\n    },\n    async initVectorMap() {\n      let DataMap = await import('datamaps');\n      DataMap = DataMap.default || DataMap\n      let { fills, mapData } = this.generateMapColors();\n      let worldMap = new DataMap({\n        scope: 'world',\n        element: document.getElementById(this.id),\n        fills,\n        data: mapData,\n        responsive: true,\n        geographyConfig: {\n          borderColor: this.borderColor,\n          borderWidth: 1,\n          borderOpacity: 1,\n          highlightFillColor: this.highlightFillColor,\n          highlightBorderColor: this.highlightBorderColor,\n          highlightBorderWidth: 1,\n          highlightBorderOpacity: 1\n        }\n      });\n      let bubbleOptions = {\n        radius: 2,\n        borderWidth: 4,\n        highlightBorderWidth: 4,\n        fillKey: this.bubbleFillColor,\n        fillColor: this.bubbleFillColor,\n        borderColor: this.bubbleFillColor,\n        highlightFillColor: this.bubbleHighlightFillColor,\n        highlightBorderColor: this.bubbleHighlightFillColor\n      }\n      let bubblePoints = this.points.map(point => {\n        return {\n          ...bubbleOptions,\n          ...point\n        }\n      })\n      worldMap.bubbles(bubblePoints, {\n        popupTemplate: function(geo, data) {\n          return '<div class=\"hoverinfo\">' + data.name\n        }\n      });\n      let resizeFunc = worldMap.resize.bind(worldMap);\n      window.addEventListener(\n        'resize',\n        () => {\n          throttle(resizeFunc, 40);\n        },\n        false\n      );\n    },\n    randomString() {\n      let text = \"\";\n      let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n      for (let i = 0; i < 5; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n      return text;\n    }\n  },\n  async mounted() {\n    this.initVectorMap();\n  }\n};\n</script>\n<style></style>\n"]}]}